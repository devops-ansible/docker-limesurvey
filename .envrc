#!/usr/bin/env bash

# If this file is sourced by the current shell it, will check if a local python and
# ansible environment is prepared. If not, it will prepare this once, otherwise it just
# activates this python environment

# this needs the following software packages installed
#  * virtualenv
#  * pyenv
#  * pyenv-virtualenv

# if additionally "direnv" is installed and properly integrated into the shell
# it will source this file on entering this directory.

# Q: this will work in bash and zsh.
#    as direnv also support fish and elvish, will this file work with those shells, too?

# check if python version is set in current dir
_PYTHON=python3

venvDir=".venv"

# update virtual environment of this repo once a day
if [ -d "${venvDir}" ]; then
    # re-initiate virtual env once a day
    case "$(uname -sr)" in
        Darwin*)
            # MacOS
            # shellcheck disable=SC2012
            venvCreated="$( ls -ldc -D "%Y%m%d" "${venvDir}" | awk -F ' ' '{print $6}' )"
            ;;
        Linux*)
            # Linux
            # shellcheck disable=SC2012
            venvCreated="$( ls -ldc --time-style="+%Y%m%d" "${venvDir}" | awk -F ' ' '{print $6}' )"
            ;;
    esac
    curDate="$( date +'%Y%m%d' )"
    if [ "$((curDate))" -gt "$((venvCreated))" ]; then
        # shellcheck disable=SC2016
        echo 'renew the virtual environment by deleting the `.venv` directory ...'
        rm -rf "${venvDir}"
    fi
fi

# Setup in a local .venv the python and ansible environment
# https://northerndata.atlassian.net/wiki/spaces/IAAS/pages/1988624412/Ansible
if [ -r requirements.txt ]; then
    if [ ! -d "${venvDir}" ] ; then
        echo "direnv: Creating virtualenv in ${PWD}/${venvDir} with $( ${_PYTHON} -V )"
        virtualenv "${venvDir}" -p ${_PYTHON}
        # shellcheck disable=SC1091
        . "${venvDir}/bin/activate"
        "${venvDir}/bin/pip" install --upgrade pip
        "${venvDir}/bin/pip" install -r requirements.txt

        if [ -r requirements.yml ]; then
            echo "direnv: Ensuring ansible-galaxy requirements"
            "${venvDir}/bin/ansible-galaxy" collection install -r requirements.yml
        fi

        # like https://northerndata.atlassian.net/wiki/spaces/IAAS/pages/2294415361/pre-commit+in+Git+repositories
        # but installing pre-commit locally, just to the venv
        if [ -f ".pre-commit-config.yaml" ]; then
            echo "direnv: Ensuring pre-commit hooks"
            "${venvDir}/bin/pre-commit" install --allow-missing-config
        fi

        # like https://northerndata.atlassian.net/wiki/spaces/IAAS/pages/2294415361/pre-commit+in+Git+repositories
        # but installing pre-commit locally, just to the venv
        if [ ".pre-commit-config.yaml" ]; then
            echo "direnv: Ensuring pre-commit hooks"
            .venv/bin/pre-commit install --allow-missing-config
        fi
    fi
fi

if [ -r "${venvDir}/bin/activate" ]; then
    # shellcheck disable=SC1091
    . "${venvDir}/bin/activate"
    echo "direnv: Activated $( ${_PYTHON} -V ) virtualenv in ${PWD}/${venvDir}"
fi

# ansible log handling, one log file per day, per change dir
if [ -f "ansible.log" ]; then
    dst="$( date -r ansible.log  +%Y-%m-%d ).ansible.log"
    if [ ! -f "${dst}" ]; then
        mv "ansible.log" "${dst}" && \
        echo "direnv: rotated ansible log to ${dst} based on last mtime"
    fi
fi

# add local bin directory to $PATH if existent
if [ -d "${PWD}/bin" ]; then
    PATH="${PATH}:${PWD}/bin"
fi

# disable warnings about direnv not able to set PS1
# see: https://github.com/direnv/direnv/wiki/PS1
unset PS1
